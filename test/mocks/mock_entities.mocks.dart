// Mocks generated by Mockito 5.0.14 from annotations
// in weather_app/test/mocks/mock_entities.dart.
// Do not manually edit this file.

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/features/location/domain/entities/address.dart'
    as _i4;
import 'package:weather_app/features/location/domain/entities/address_component.dart'
    as _i5;
import 'package:weather_app/features/location/domain/entities/geometry.dart'
    as _i2;
import 'package:weather_app/features/location/domain/entities/location.dart'
    as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeGeometry_0 extends _i1.Fake implements _i2.Geometry {}

class _FakeLocation_1 extends _i1.Fake implements _i3.Location {}

/// A class which mocks [Address].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddress extends _i1.Mock implements _i4.Address {
  MockAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.AddressComponent> get addressComponents =>
      (super.noSuchMethod(Invocation.getter(#addressComponents),
          returnValue: <_i5.AddressComponent>[]) as List<_i5.AddressComponent>);
  @override
  String get formmatedAddress =>
      (super.noSuchMethod(Invocation.getter(#formmatedAddress), returnValue: '')
          as String);
  @override
  _i2.Geometry get geometry => (super.noSuchMethod(Invocation.getter(#geometry),
      returnValue: _FakeGeometry_0()) as _i2.Geometry);
  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Geometry].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeometry extends _i1.Mock implements _i2.Geometry {
  MockGeometry() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Location get location => (super.noSuchMethod(Invocation.getter(#location),
      returnValue: _FakeLocation_1()) as _i3.Location);
  @override
  set location(_i3.Location? _location) =>
      super.noSuchMethod(Invocation.setter(#location, _location),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Location].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocation extends _i1.Mock implements _i3.Location {
  MockLocation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  num get lat =>
      (super.noSuchMethod(Invocation.getter(#lat), returnValue: 0) as num);
  @override
  set lat(num? _lat) => super.noSuchMethod(Invocation.setter(#lat, _lat),
      returnValueForMissingStub: null);
  @override
  num get lng =>
      (super.noSuchMethod(Invocation.getter(#lng), returnValue: 0) as num);
  @override
  set lng(num? _lng) => super.noSuchMethod(Invocation.setter(#lng, _lng),
      returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AddressComponent].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddressComponent extends _i1.Mock implements _i5.AddressComponent {
  MockAddressComponent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get longName =>
      (super.noSuchMethod(Invocation.getter(#longName), returnValue: '')
          as String);
  @override
  set longName(String? _longName) =>
      super.noSuchMethod(Invocation.setter(#longName, _longName),
          returnValueForMissingStub: null);
  @override
  String get shortName =>
      (super.noSuchMethod(Invocation.getter(#shortName), returnValue: '')
          as String);
  @override
  set shortName(String? _shortName) =>
      super.noSuchMethod(Invocation.setter(#shortName, _shortName),
          returnValueForMissingStub: null);
  @override
  List<String> get type =>
      (super.noSuchMethod(Invocation.getter(#type), returnValue: <String>[])
          as List<String>);
  @override
  set type(List<String>? _type) =>
      super.noSuchMethod(Invocation.setter(#type, _type),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
